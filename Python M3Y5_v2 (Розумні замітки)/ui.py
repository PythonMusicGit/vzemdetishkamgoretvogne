# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'notes.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 600)
        MainWindow.setStyleSheet("QMainWindow {\n"
"    background-color: #f0e6d2; /* Light beige or off-white background for an old-school look */\n"
"    color: #2e2a47; /* Dark brown text to mimic older computer displays */\n"
"    font-family: \'Times New Roman\', serif; /* Classic serif font for vintage feel */\n"
"    font-size: 14px; /* Standard font size for readability */\n"
"    border: 2px solid #d3b897; /* Soft brown border to give it an aged frame appearance */\n"
"    border-radius: 8px; /* Slightly rounded corners for a softer vintage frame */\n"
"    padding: 15px;\n"
"}\n"
"\n"
"QMainWindow::separator {\n"
"    background-color: #d3b897; /* Soft brown color for separators */\n"
"    width: 2px; /* Thin separators */\n"
"}\n"
"\n"
"QMainWindow::separator:horizontal {\n"
"    height: 2px; /* Horizontal separator height */\n"
"}\n"
"\n"
"QMainWindow::separator:vertical {\n"
"    width: 2px; /* Vertical separator width */\n"
"}\n"
"\n"
"QMenuBar {\n"
"    background-color: #c5b88b; /* A muted gold or beige color for the menu bar */\n"
"    color: #2e2a47; /* Dark brown text color for a vintage contrast */\n"
"    font-family: \'Times New Roman\', serif; /* Matching classic font */\n"
"    font-size: 15px;\n"
"    padding: 4px;\n"
"    border-bottom: 2px solid #d3b897; /* Light brown border at the bottom */\n"
"}\n"
"\n"
"QMenuBar::item {\n"
"    padding: 5px 15px;\n"
"    background-color: #c5b88b; /* Same color for each menu item background */\n"
"    border-radius: 5px;\n"
"}\n"
"\n"
"QMenuBar::item:selected {\n"
"    background-color: #b89f6d; /* Slightly darker gold for selected items */\n"
"    color: #ffffff; /* White text when an item is selected */\n"
"}\n"
"\n"
"QMenu {\n"
"    background-color: #e7dcb5; /* Light beige background for the dropdown menu */\n"
"    border: 1px solid #d3b897; /* Soft brown border for the menu */\n"
"    border-radius: 5px; /* Rounded corners for menu items */\n"
"}\n"
"\n"
"QMenu::item {\n"
"    padding: 8px 12px;\n"
"    background-color: #e7dcb5; /* Consistent light beige background */\n"
"    color: #2e2a47; /* Dark text color for readability */\n"
"}\n"
"\n"
"QMenu::item:selected {\n"
"    background-color: #d3b897; /* Brown background on hover */\n"
"    color: #ffffff; /* White text when selected */\n"
"}\n"
"\n"
"QToolBar {\n"
"    background-color: #f0e6d2; /* Off-white background for the toolbar */\n"
"    border: 1px solid #d3b897; /* Border around the toolbar */\n"
"    spacing: 10px;\n"
"}\n"
"\n"
"QToolBar::handle {\n"
"    background-color: #d3b897; /* Soft brown handle color */\n"
"    width: 8px; /* Thin toolbar handle */\n"
"}\n"
"\n"
"QStatusBar {\n"
"    background-color: #f0e6d2; /* Same light beige background for consistency */\n"
"    color: #2e2a47; /* Dark text for the status bar */\n"
"    border-top: 1px solid #d3b897; /* Light border on top */\n"
"}\n"
"\n"
"QPushButton {\n"
"    background-color: #c5b88b; /* Muted gold background for buttons */\n"
"    color: #2e2a47; /* Dark brown text color */\n"
"    border: 2px solid #d3b897; /* Soft brown border around buttons */\n"
"    font-family: \'Times New Roman\', serif; /* Matching serif font */\n"
"    font-size: 14px;\n"
"    padding: 8px 15px;\n"
"    border-radius: 5px;\n"
"    transition: all 0.3s ease;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #b89f6d; /* Darker gold background on hover */\n"
"    color: #ffffff; /* White text when hovered */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #a47b4d; /* Even darker brown on button press */\n"
"    color: #ffffff; /* White text on press */\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.field_text = QtWidgets.QTextEdit(self.centralwidget)
        self.field_text.setGeometry(QtCore.QRect(0, 370, 551, 181))
        self.field_text.setStyleSheet("QTextEdit {\n"
"    background-color: #1b1b1b; /* Dark, eerie background */\n"
"    color: #00ff00; /* Neon green text for an unsettling effect */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Typewriter font for a retro vibe */\n"
"    font-size: 16px;\n"
"    border: 2px solid #ff00ff; /* Bright magenta border to enhance the weirdcore vibe */\n"
"    border-radius: 10px;\n"
"    padding: 10px;\n"
"    box-shadow: 0 0 10px #ff00ff, 0 0 15px #00ff00; /* Glowing border effect */\n"
"    caret-color: #ff00ff; /* The cursor will be a glowing magenta */\n"
"}\n"
"\n"
"QTextEdit:focus {\n"
"    background-color: #222222; /* Slightly lighter background when focused */\n"
"    color: #ff00ff; /* Change text to magenta when focused */\n"
"    border-color: #00ff00; /* Change border to neon green when focused */\n"
"}\n"
"\n"
"QTextEdit QScrollBar {\n"
"    background-color: #1b1b1b; /* Same dark color for the scrollbar */\n"
"    border: none;\n"
"    width: 10px;\n"
"}\n"
"\n"
"QTextEdit QScrollBar::handle {\n"
"    background-color: #ff00ff; /* Bright magenta scrollbar handle */\n"
"    border-radius: 5px;\n"
"}\n"
"\n"
"QTextEdit QScrollBar::handle:hover {\n"
"    background-color: #00ff00; /* Hover effect to change the scrollbar handle to neon green */\n"
"}\n"
"\n"
"QTextEdit QScrollBar::add-line, QTextEdit QScrollBar::sub-line {\n"
"    background: none;\n"
"    border: none;\n"
"}\n"
"")
        self.field_text.setObjectName("field_text")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 60, 256, 192))
        self.listWidget.setStyleSheet("QListWidget {\n"
"    background-color: #121212; /* Dark background for a creepy, unsettling vibe */\n"
"    color: #00ff00; /* Neon green text for a stark contrast */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter font */\n"
"    font-size: 16px;\n"
"    border: 2px solid #ff00ff; /* Glowing magenta border around the list */\n"
"    border-radius: 10px; /* Slightly rounded corners */\n"
"    padding: 10px;\n"
"    selection-color: #ff00ff; /* Magenta text when an item is selected */\n"
"    selection-background-color: #00ff00; /* Neon green background for selected items */\n"
"    outline: none; /* Remove the default outline */\n"
"    box-shadow: 0 0 10px #ff00ff, 0 0 20px #00ff00; /* Glowing effect around the list */\n"
"}\n"
"\n"
"QListWidget::item {\n"
"    padding: 8px;\n"
"    background-color: #1b1b1b; /* Dark background for each item */\n"
"    border-radius: 5px; /* Slight curve on item edges */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QListWidget::item:hover {\n"
"    background-color: #222222; /* Slightly lighter background when hovered */\n"
"    color: #ff00ff; /* Text turns magenta on hover */\n"
"    box-shadow: 0 0 15px #ff00ff, 0 0 25px #00ff00; /* Glowing effect on hover */\n"
"}\n"
"\n"
"QListWidget::item:selected {\n"
"    background-color: #00ff00; /* Neon green background for selected items */\n"
"    color: #ff00ff; /* Magenta text for selected items */\n"
"    box-shadow: inset 0 0 20px #ff00ff, inset 0 0 25px #00ff00; /* Inset glowing effect for selection */\n"
"}\n"
"\n"
"QListWidget::item:active {\n"
"    background-color: #111111; /* Darker background when clicked */\n"
"    color: #00ff00; /* Green text when active */\n"
"    box-shadow: inset 0 0 20px #ff00ff, inset 0 0 30px #00ff00; /* Intense glowing effect when clicked */\n"
"}\n"
"\n"
"QListWidget::item:focus {\n"
"    outline: none; /* Remove focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QScrollBar {\n"
"    background-color: #121212; /* Same dark background for the scrollbar */\n"
"    width: 12px;\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QScrollBar::handle {\n"
"    background-color: #ff00ff; /* Magenta scrollbar handle */\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QScrollBar::handle:hover {\n"
"    background-color: #00ff00; /* Hover effect with green handle */\n"
"}\n"
"\n"
"QScrollBar::add-line, QScrollBar::sub-line {\n"
"    background: none;\n"
"    border: none;\n"
"}\n"
"")
        self.listWidget.setObjectName("listWidget")
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(280, 70, 361, 111))
        self.listWidget_2.setStyleSheet("QListWidget {\n"
"    background-color: #121212; /* Dark background for a creepy, unsettling vibe */\n"
"    color: #00ff00; /* Neon green text for a stark contrast */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter font */\n"
"    font-size: 16px;\n"
"    border: 2px solid #ff00ff; /* Glowing magenta border around the list */\n"
"    border-radius: 10px; /* Slightly rounded corners */\n"
"    padding: 10px;\n"
"    selection-color: #ff00ff; /* Magenta text when an item is selected */\n"
"    selection-background-color: #00ff00; /* Neon green background for selected items */\n"
"    outline: none; /* Remove the default outline */\n"
"    box-shadow: 0 0 10px #ff00ff, 0 0 20px #00ff00; /* Glowing effect around the list */\n"
"}\n"
"\n"
"QListWidget::item {\n"
"    padding: 8px;\n"
"    background-color: #1b1b1b; /* Dark background for each item */\n"
"    border-radius: 5px; /* Slight curve on item edges */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QListWidget::item:hover {\n"
"    background-color: #222222; /* Slightly lighter background when hovered */\n"
"    color: #ff00ff; /* Text turns magenta on hover */\n"
"    box-shadow: 0 0 15px #ff00ff, 0 0 25px #00ff00; /* Glowing effect on hover */\n"
"}\n"
"\n"
"QListWidget::item:selected {\n"
"    background-color: #00ff00; /* Neon green background for selected items */\n"
"    color: #ff00ff; /* Magenta text for selected items */\n"
"    box-shadow: inset 0 0 20px #ff00ff, inset 0 0 25px #00ff00; /* Inset glowing effect for selection */\n"
"}\n"
"\n"
"QListWidget::item:active {\n"
"    background-color: #111111; /* Darker background when clicked */\n"
"    color: #00ff00; /* Green text when active */\n"
"    box-shadow: inset 0 0 20px #ff00ff, inset 0 0 30px #00ff00; /* Intense glowing effect when clicked */\n"
"}\n"
"\n"
"QListWidget::item:focus {\n"
"    outline: none; /* Remove focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QScrollBar {\n"
"    background-color: #121212; /* Same dark background for the scrollbar */\n"
"    width: 12px;\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QScrollBar::handle {\n"
"    background-color: #ff00ff; /* Magenta scrollbar handle */\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QScrollBar::handle:hover {\n"
"    background-color: #00ff00; /* Hover effect with green handle */\n"
"}\n"
"\n"
"QScrollBar::add-line, QScrollBar::sub-line {\n"
"    background: none;\n"
"    border: none;\n"
"}\n"
"")
        self.listWidget_2.setObjectName("listWidget_2")
        self.button_note_create = QtWidgets.QPushButton(self.centralwidget)
        self.button_note_create.setGeometry(QtCore.QRect(610, 380, 271, 41))
        self.button_note_create.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_note_create.setObjectName("button_note_create")
        self.button_note_del = QtWidgets.QPushButton(self.centralwidget)
        self.button_note_del.setGeometry(QtCore.QRect(630, 430, 251, 51))
        self.button_note_del.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_note_del.setObjectName("button_note_del")
        self.button_note_save = QtWidgets.QPushButton(self.centralwidget)
        self.button_note_save.setGeometry(QtCore.QRect(180, 260, 261, 71))
        self.button_note_save.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_note_save.setObjectName("button_note_save")
        self.button_tag_add = QtWidgets.QPushButton(self.centralwidget)
        self.button_tag_add.setGeometry(QtCore.QRect(490, 240, 391, 51))
        self.button_tag_add.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_tag_add.setObjectName("button_tag_add")
        self.button_tag_del = QtWidgets.QPushButton(self.centralwidget)
        self.button_tag_del.setGeometry(QtCore.QRect(490, 300, 391, 61))
        self.button_tag_del.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_tag_del.setObjectName("button_tag_del")
        self.button_tag_search = QtWidgets.QPushButton(self.centralwidget)
        self.button_tag_search.setGeometry(QtCore.QRect(580, 490, 311, 51))
        self.button_tag_search.setStyleSheet("QPushButton {\n"
"    background-color: #2b2b2b; /* Dark, grim background */\n"
"    color: #ff00ff; /* Neon pink text */\n"
"    font-family: \'Courier New\', Courier, monospace; /* Retro, typewriter-style font */\n"
"    font-size: 18px;\n"
"    border: 2px solid #00ff00; /* Neon green border */\n"
"    border-radius: 20px; /* Rounded corners */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-transform: uppercase; /* Text capitalized for a strange, harsh feel */\n"
"    box-shadow: 0 0 12px #ff00ff, 0 0 20px #00ff00; /* Glowing effects */\n"
"    transition: all 0.3s ease; /* Smooth transition for hover effect */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #222222; /* Slightly darker background on hover */\n"
"    color: #00ff00; /* Change text to neon green on hover */\n"
"    border-color: #ff00ff; /* Invert the border color to magenta on hover */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effects */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #1a1a1a; /* Darker background when pressed */\n"
"    color: #ff00ff; /* Keep neon pink text when pressed */\n"
"    border-color: #ff00ff; /* Border stays magenta */\n"
"    box-shadow: inset 0 0 15px #ff00ff, inset 0 0 20px #00ff00; /* Inset glowing effect when pressed */\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    outline: none; /* Remove default focus outline */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 20px #00ff00; /* Keep glowing effect when focused */\n"
"}\n"
"\n"
"QPushButton QIcon {\n"
"    filter: hue-rotate(180deg); /* Rotate the hue of any icons for a surreal touch */\n"
"}\n"
"\n"
"")
        self.button_tag_search.setObjectName("button_tag_search")
        self.list_notes_label = QtWidgets.QLabel(self.centralwidget)
        self.list_notes_label.setGeometry(QtCore.QRect(0, 0, 261, 51))
        self.list_notes_label.setStyleSheet("QLabel {\n"
"    font-family: \'Comic Sans MS\', Comic Sans, cursive; /* Comic Sans font for a quirky, nostalgic feel */\n"
"    font-size: 24px; /* Slightly larger font for dreamlike text */\n"
"    color: #ffb3e6; /* Soft pastel pink color */\n"
"    background-color: #e6f7ff; /* Light pastel blue background for a dreamy effect */\n"
"    border: 2px solid #ffccff; /* Light purple border to enhance the dreamy feel */\n"
"    border-radius: 15px; /* Rounded corners for a softer, dreamlike appearance */\n"
"    padding: 15px;\n"
"    text-align: center; /* Center the text for symmetry and balance */\n"
"    box-shadow: 0 0 20px rgba(255, 182, 233, 0.8); /* Soft pink glowing effect around the label */\n"
"    opacity: 0.9; /* Slight transparency for a dreamy, ethereal feel */\n"
"    transition: all 0.3s ease-in-out; /* Smooth transition for hover effects */\n"
"}\n"
"\n"
"QLabel:hover {\n"
"    background-color: #ffffff; /* Lighten the background on hover for a subtle change */\n"
"    color: #ff66cc; /* Change the text color to a more vibrant pink on hover */\n"
"    box-shadow: 0 0 30px rgba(255, 182, 233, 1); /* Stronger glow on hover for emphasis */\n"
"}\n"
"\n"
"QLabel:focus {\n"
"    outline: none; /* Remove focus outline */\n"
"    box-shadow: 0 0 30px rgba(255, 182, 233, 1), 0 0 40px rgba(255, 204, 255, 0.5); /* Enhanced glowing focus effect */\n"
"}\n"
"\n"
"")
        self.list_notes_label.setObjectName("list_notes_label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(280, 0, 341, 61))
        self.label_2.setStyleSheet("QLabel {\n"
"    font-family: \'Comic Sans MS\', Comic Sans, cursive; /* Comic Sans font for a quirky, nostalgic feel */\n"
"    font-size: 24px; /* Slightly larger font for dreamlike text */\n"
"    color: #ffb3e6; /* Soft pastel pink color */\n"
"    background-color: #e6f7ff; /* Light pastel blue background for a dreamy effect */\n"
"    border: 2px solid #ffccff; /* Light purple border to enhance the dreamy feel */\n"
"    border-radius: 15px; /* Rounded corners for a softer, dreamlike appearance */\n"
"    padding: 15px;\n"
"    text-align: center; /* Center the text for symmetry and balance */\n"
"    box-shadow: 0 0 20px rgba(255, 182, 233, 0.8); /* Soft pink glowing effect around the label */\n"
"    opacity: 0.9; /* Slight transparency for a dreamy, ethereal feel */\n"
"    transition: all 0.3s ease-in-out; /* Smooth transition for hover effects */\n"
"}\n"
"\n"
"QLabel:hover {\n"
"    background-color: #ffffff; /* Lighten the background on hover for a subtle change */\n"
"    color: #ff66cc; /* Change the text color to a more vibrant pink on hover */\n"
"    box-shadow: 0 0 30px rgba(255, 182, 233, 1); /* Stronger glow on hover for emphasis */\n"
"}\n"
"\n"
"QLabel:focus {\n"
"    outline: none; /* Remove focus outline */\n"
"    box-shadow: 0 0 30px rgba(255, 182, 233, 1), 0 0 40px rgba(255, 204, 255, 0.5); /* Enhanced glowing focus effect */\n"
"}\n"
"\n"
"")
        self.label_2.setObjectName("label_2")
        self.field_tag = QtWidgets.QLineEdit(self.centralwidget)
        self.field_tag.setGeometry(QtCore.QRect(490, 190, 391, 41))
        self.field_tag.setStyleSheet("QLineEdit {\n"
"    font-family: \'Press Start 2P\', monospace; /* Glitch-style font for a techy, malfunctioning look */\n"
"    font-size: 18px; /* Size adjusted for readability */\n"
"    color: #ff00ff; /* Neon magenta text color for the glitch effect */\n"
"    background-color: #1b1b1b; /* Dark background to contrast the neon text */\n"
"    border: 2px solid #00ff00; /* Neon green border to create a glowing effect */\n"
"    border-radius: 10px; /* Rounded corners for a slightly softened look */\n"
"    padding: 10px;\n"
"    text-align: left; /* Align the text to the left */\n"
"    box-shadow: 0 0 10px #ff00ff, 0 0 15px #00ff00; /* Glowing neon effect */\n"
"    transition: all 0.2s ease-in-out; /* Smooth transition for hover and focus effects */\n"
"    outline: none; /* Remove the default outline */\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    background-color: #111111; /* Darker background when focused */\n"
"    color: #00ff00; /* Neon green text color when focused */\n"
"    border-color: #ff00ff; /* Switch border to neon pink when focused */\n"
"    box-shadow: 0 0 25px #ff00ff, 0 0 35px #00ff00; /* Stronger glowing effect when focused */\n"
"}\n"
"\n"
"QLineEdit:hover {\n"
"    background-color: #222222; /* Slightly lighter background on hover */\n"
"    color: #ff00ff; /* Change text color to neon pink when hovering */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Stronger glowing effect on hover */\n"
"}\n"
"\n"
"QLineEdit:invalid {\n"
"    border-color: #ff0000; /* Red border when input is invalid */\n"
"    background-color: #3b3b3b; /* Dark background for invalid input */\n"
"    color: #ff0000; /* Red text color when invalid */\n"
"}\n"
"\n"
"QLineEdit::placeholder {\n"
"    color: #cccccc; /* Light gray color for placeholder text */\n"
"    opacity: 0.7; /* Slight opacity for placeholder text */\n"
"    font-style: italic; /* Italicize the placeholder text */\n"
"}\n"
"")
        self.field_tag.setText("")
        self.field_tag.setObjectName("field_tag")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(710, 30, 192, 144))
        self.calendarWidget.setStyleSheet("QCalendarWidget {\n"
"    background-color: #121212; /* Dark background for a glitchy, high-tech feel */\n"
"    color: #ff00ff; /* Neon magenta text for a glitchy effect */\n"
"    font-family: \'Press Start 2P\', monospace; /* Glitch-style font for that retro, techy vibe */\n"
"    font-size: 16px; /* Adjusted font size for readability */\n"
"    border: 3px solid #00ff00; /* Neon green border for a glowing effect */\n"
"    border-radius: 12px; /* Rounded corners for a softer, futuristic appearance */\n"
"    padding: 10px;\n"
"    box-shadow: 0 0 15px rgba(255, 0, 255, 0.8), 0 0 20px rgba(0, 255, 0, 0.8); /* Glowing neon effect */\n"
"    transition: all 0.3s ease-in-out; /* Smooth transition for hover and focus effects */\n"
"}\n"
"\n"
"QCalendarWidget QToolButton {\n"
"    background-color: transparent; /* Transparent buttons for a glitchy effect */\n"
"    border: none;\n"
"    color: #ff00ff; /* Neon magenta text color */\n"
"    font-size: 18px; /* Adjusted font size for the buttons */\n"
"    padding: 5px;\n"
"    transition: all 0.2s ease-in-out;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton:hover {\n"
"    background-color: #333333; /* Slightly darker background when hovering */\n"
"    color: #00ff00; /* Neon green text when hovering */\n"
"    box-shadow: 0 0 10px #ff00ff, 0 0 15px #00ff00; /* Glowing effect on hover */\n"
"}\n"
"\n"
"QCalendarWidget QDateTimeEdit {\n"
"    background-color: #121212; /* Same dark background for datetime inputs */\n"
"    color: #ff00ff; /* Neon magenta text for datetime fields */\n"
"    border: 2px solid #00ff00; /* Green border for the datetime inputs */\n"
"    border-radius: 8px;\n"
"    padding: 5px;\n"
"}\n"
"\n"
"QCalendarWidget QDateTimeEdit:focus {\n"
"    background-color: #333333; /* Darker background when focused */\n"
"    color: #00ff00; /* Neon green text color */\n"
"    border-color: #ff00ff; /* Magenta border when focused */\n"
"    box-shadow: 0 0 15px #ff00ff, 0 0 20px #00ff00; /* Glowing effect when focused */\n"
"}\n"
"\n"
"QCalendarWidget::selected {\n"
"    background-color: #00ff00; /* Neon green background for selected dates */\n"
"    color: #ff00ff; /* Magenta text for selected dates */\n"
"    box-shadow: inset 0 0 10px #ff00ff, inset 0 0 15px #00ff00; /* Inset glow for selected dates */\n"
"}\n"
"\n"
"QCalendarWidget::item {\n"
"    background-color: #1b1b1b; /* Dark background for each date */\n"
"    color: #ff00ff; /* Neon magenta text for dates */\n"
"    border-radius: 5px; /* Slightly rounded corners for each date */\n"
"    padding: 8px;\n"
"    transition: all 0.3s ease-in-out; /* Smooth transition for hover effects */\n"
"}\n"
"\n"
"QCalendarWidget::item:hover {\n"
"    background-color: #333333; /* Darker background on hover */\n"
"    color: #00ff00; /* Neon green text color on hover */\n"
"    box-shadow: 0 0 15px #ff00ff, 0 0 20px #00ff00; /* Glowing effect on hover */\n"
"}\n"
"\n"
"QCalendarWidget::item:focused {\n"
"    background-color: #222222; /* Slightly darker background for focused date */\n"
"    color: #ff00ff; /* Magenta text for focused date */\n"
"    border: 1px solid #00ff00; /* Neon green border for focused date */\n"
"    box-shadow: 0 0 20px #ff00ff, 0 0 30px #00ff00; /* Glowing focus effect */\n"
"}\n"
"\n"
"QCalendarWidget::monthNavigationButton {\n"
"    background-color: transparent; /* Transparent background for month navigation buttons */\n"
"    border: none;\n"
"    color: #ff00ff; /* Neon magenta text for navigation */\n"
"}\n"
"\n"
"QCalendarWidget::monthNavigationButton:hover {\n"
"    background-color: #333333; /* Darker background when hovering */\n"
"    color: #00ff00; /* Neon green text for hover effect */\n"
"    box-shadow: 0 0 15px #ff00ff, 0 0 20px #00ff00; /* Glowing effect on hover */\n"
"}\n"
"\n"
"")
        self.calendarWidget.setObjectName("calendarWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 36))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button_note_create.setText(_translate("MainWindow", "Створити замітку"))
        self.button_note_del.setText(_translate("MainWindow", "Видалити замітку"))
        self.button_note_save.setText(_translate("MainWindow", "Зберегти замітку"))
        self.button_tag_add.setText(_translate("MainWindow", "Додати до замітки"))
        self.button_tag_del.setText(_translate("MainWindow", "Відкріпити від замітки"))
        self.button_tag_search.setText(_translate("MainWindow", "Шукати замітки за тегом"))
        self.list_notes_label.setText(_translate("MainWindow", "Список заміток"))
        self.label_2.setText(_translate("MainWindow", "Список тегів"))
        self.field_tag.setPlaceholderText(_translate("MainWindow", "Введіть тег..."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
